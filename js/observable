observable
: 데이터를 구독자(subscribe)에게 보내는 객체 -> angular 전반에 걸쳐 비동기 이벤트를 처리할 때 사용됨
: observable가 제공하는 subscribe() 메서드를 실행하면 이 옵저버블을 구독할 수 있으며, 이 메서드에 지정하는 콜백 함수로 데이터, 에러, 종료 신호를 받음

observer 
: observable subscribe() 메서드에 전달하는 객체. 이 객체에는 구독자가 반응할 콜백 함수를 정의함

발행자는 구독자 함수를 사용해서 observable인스터스를 생성. 구독자 함수는 구독자가 subscribe()메소드를 사용할 때 실행됨-> 이 함수에서 데이터나 메시지를 생성하고 발행

observable의 subscribe() 함수를 실행하면 반환되는 Subscription 타입의 객체가 observer이며, 이 객체의 unsubscribe()를 실행하면 옵저버블 구독을 해지할 수 있음

<사용자의 접속 위치 확인하기>
// 구독자가 구독을 실행하면 새로운 Observable 인스턴스를 생성하고
// 클라이언트의 접속 위치를 추적하기 시작합니다.
const locations = new Observable((observer) => {
  let watchId: number;


  // 접속 위치를 처리하는 API는 간단하게 사용해 봅니다.
  if ('geolocation' in navigator) {
    watchId = navigator.geolocation.watchPosition((position: GeolocationPosition) => {
      observer.next(position);
    }, (error: GeolocationPositionError) => {
      observer.error(error);
    });
  } else {
    observer.error('Geolocation not available');
  }

  // 구독자가 구독을 해지하면 사용하던 데이터를 모두 지웁니다.
  return {
    unsubscribe() {
      navigator.geolocation.clearWatch(watchId);
    }
  };
});

// 옵저버블을 시작하려면 subscribe() 함수를 실행합니다.
const locationsSubscription = locations.subscribe({
  next(position) {
    console.log('Current Position: ', position);
  },
  error(msg) {
    console.log('Error Getting Location: ', msg);
  }
});

// 옵저버블은 10초 후에 구독을 해지합니다.
setTimeout(() => {
  locationsSubscription.unsubscribe();
}, 10000);


<observable이 보내는 세 종류의 알림을 처리하는 콜백 함수>
next : 필수. 데이터 스트림을 처리하는 핸들러, observable 구독을 시작한 후 여러번 실행됨
error : 필수X. 에러 스트림을 처리하는 핸들러. 에러 스트림이 전달되면 이후 observable로직이 실행되지 않음
complete : 필수x. observable 종료 스트림을 처리하는 핸들러. observable에서 지연 로직을 사용한다면 observable이 종료된 이후에도 새로운 데이터가 전달될 수 있음

<옵저버 객체로 구독하기>
// 3개의 값을 전달하도록 옵저버블을 간단하게 정의합니다.
const myObservable = of(1, 2, 3);

// 옵저버 객체를 정의합니다.
const myObserver = {
  next: (x: number) => console.log('Observer got a next value: ' + x),
  error: (err: Error) => console.error('Observer got an error: ' + err),
  complete: () => console.log('Observer got a complete notification'),
};

// 옵저버 객체를 실행합니다.
myObservable.subscribe(myObserver);

// 로그:
// Observer got a next value: 1
// Observer got a next value: 2
// Observer got a next value: 3
// Observer got a complete notification

<옵저버 인자로 구독하기>
myObservable.subscribe(
  x => console.log('Observer got a next value: ' + x),
  err => console.error('Observer got an error: ' + err),
  () => console.log('Observer got a complete notification')
);

stream-> 옵저버블로 발행되는 데이터 

<옵저버블 생성하기>
// 이 함수는 subscribe()가 실행될 때 같이 실행됩니다.
function sequenceSubscriber(observer: Observer<number>) {
  // 1, 2, 3을 순서대로 보내고, 옵저버블을 종료합니다.
  observer.next(1);
  observer.next(2);
  observer.next(3);
  observer.complete();

  // 이 함수는 모든 데이터를 동기 방식으로 보내기 때문에
  // 구독이 해제될 때 실행해야 하는 로직은 없습니다.
  return {unsubscribe() {}};
}

// 구독자 함수를 인자로 전달하면서 새로운 Observable 인스턴스를 만듭니다.
const sequence = new Observable(sequenceSubscriber);

// 옵저버블을 실행하고 스트림이 전달될 때마다 로그를 출력합니다.
sequence.subscribe({
  next(num) { console.log(num); },
  complete() { console.log('Finished sequence'); }
});

// 로그:
// 1
// 2
// 3
// Finished sequence

<fromEvent() 함수로 옵저버블 생성하기>
function fromEvent<T extends keyof HTMLElementEventMap>(target: HTMLElement, eventName: T) {
  return new Observable<HTMLElementEventMap[T]>((observer) => {
    const handler = (e: HTMLElementEventMap[T]) => observer.next(e);

    // 대상 엘리먼트에 이벤트 핸들러를 추가합니다.
    target.addEventListener(eventName, handler);

    return () => {
      // 이벤트 핸들러를 제거합니다.
      target.removeEventListener(eventName, handler);
    };
  });
}

<fromEvent() 함수 활용하기>
const ESC_CODE = 'Escape';
const nameInput = document.getElementById('name') as HTMLInputElement;

const subscription = fromEvent(nameInput, 'keydown').subscribe((e: KeyboardEvent) => {
  if (e.code === ESC_CODE) {
    nameInput.value = '';
  }
});


Multicasting -> 여러 구독자가 같은 실행 싸이클에서 실행할 수 있도록 broadcasting하는 방법

<시퀀스 정의하기>
function sequenceSubscriber(observer: Observer<number>) {
  const seq = [1, 2, 3];
  let timeoutId: any;

  // 배열을 순회하면서 배열의 항목을 1초마다 하나씩 발행합니다.
  function doInSequence(arr: number[], idx: number) {
    timeoutId = setTimeout(() => {
      observer.next(arr[idx]);
      if (idx === arr.length - 1) {
        observer.complete();
      } else {
        doInSequence(arr, ++idx);
      }
    }, 1000);
  }

  doInSequence(seq, 0);

  // 구독이 해지되면 타이머를 중지합니다.
  return {
    unsubscribe() {
      clearTimeout(timeoutId);
    }
  };
}

// 위에서 정의한 데이터 스트림을 발생하는 옵저버블을 생성합니다.
const sequence = new Observable(sequenceSubscriber);

sequence.subscribe({
  next(num) { console.log(num); },
  complete() { console.log('Finished sequence'); }
});

// 로그:
// (1초 후): 1
// (2초 후): 2
// (3초 후): 3
// (3초 후): Finished sequence

<두 번 구독하기>
// 구독을 시작하면 타이머가 시작되면서, 1초마다 데이터가 전달됩니다.
sequence.subscribe({
  next(num) { console.log('1st subscribe: ' + num); },
  complete() { console.log('1st sequence finished.'); }
});

// 0.5초 후에 새로운 구독을 시작합니다.
setTimeout(() => {
  sequence.subscribe({
    next(num) { console.log('2nd subscribe: ' + num); },
    complete() { console.log('2nd sequence finished.'); }
  });
}, 500);

// 로그:
// (1초 후): 1st subscribe: 1
// (1.5초 후): 2nd subscribe: 1
// (2초 후): 1st subscribe: 2
// (2.5초 후): 2nd subscribe: 2
// (3초 후): 1st subscribe: 3
// (3초 후): 1st sequence finished
// (3.5초 후): 2nd subscribe: 3
// (3.5초 후): 2nd sequence finished


<멀티캐스트 구독하기>
function multicastSequenceSubscriber() {
  const seq = [1, 2, 3];
  // 구독중인 옵저버를 추적합니다.
  const observers: Observer<unknown>[] = [];
  // 한 번 생성된 데이터는 모든 구독자에게 멀티캐스팅되기 때문에
  // 타이머 id는 하나로 관리합니다.
  let timeoutId: any;

  // 구독자 함수를 반환합니다.
  // 이 함수는 subscribe()가 실행될 때 함께 실행됩니다.
  return (observer: Observer<unknown>) => {
    observers.push(observer);
    // 구독이 처음 실행되면 스트림을 발생하기 시작합니다.
    if (observers.length === 1) {
      const multicastObserver: Observer<number> = {
        next(val) {
          // 모든 구독에 대해 스트림을 발행합니다.
          observers.forEach(obs => obs.next(val));
        },
        error() { /* 에러를 처리합니다... */ },
        complete() {
          // 모든 구독에 종료 스트림을 전달합니다.
          observers.slice(0).forEach(obs => obs.complete());
        }
      };
      doSequence(multicastObserver, seq, 0);
    }

    return {
      unsubscribe() {
        // 구독을 해지한 옵저버는 배열에서 제거합니다.
        observers.splice(observers.indexOf(observer), 1);
        // 구독자가 없으면 타이머를 종료합니다.
        if (observers.length === 0) {
          clearTimeout(timeoutId);
        }
      }
    };

    // 배열을 순회하면서 1초마다 하나씩 스트림을 발행합니다.
    function doSequence(sequenceObserver: Observer<number>, arr: number[], idx: number) {
      timeoutId = setTimeout(() => {
        console.log('Emitting ' + arr[idx]);
        sequenceObserver.next(arr[idx]);
        if (idx === arr.length - 1) {
          sequenceObserver.complete();
        } else {
          doSequence(sequenceObserver, arr, ++idx);
        }
      }, 1000);
    }
  };
}
// doSequence()에 정의된 스트림을 발행하는 옵저버블을 생성합니다.
const multicastSequence = new Observable(multicastSequenceSubscriber());

// 옵저버블을 구독하면 타이머를 시작하고 1초마다 스트림을 받습니다.
multicastSequence.subscribe({
  next(num) { console.log('1st subscribe: ' + num); },
  complete() { console.log('1st sequence finished.'); }
});

// 0.5초 후에 또 다른 구독을 시작합니다.
// (첫번째 값은 받지 않습니다.)
setTimeout(() => {
  multicastSequence.subscribe({
    next(num) { console.log('2nd subscribe: ' + num); },
    complete() { console.log('2nd sequence finished.'); }
  });
}, 1500);

// 로그:
// (1초 후): Emitting 1
// (1초 후): 1st subscribe: 1
// (2초 후): Emitting 2
// (2초 후): 1st subscribe: 2
// (2초 후): 2nd subscribe: 2
// (3초 후): Emitting 3
// (3초 후): 1st subscribe: 3
// (3초 후): 1st sequence finished
// (3초 후): 2nd subscribe: 3
// (3초 후): 2nd sequence finished

